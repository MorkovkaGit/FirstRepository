Алгоритм вычисления чисел Фибоначчи

public static long getFib(int x) {
        long[] array = new long[x + 1];
        array[0] = 0;
        array[1] = 1;
        for (int i = 2; i <= x; i++) {
            array[i] = array[i - 1] + array[i - 2];
        }
        return array[x];
    }
------------------------------------------------------

Сортировка пузырьком

for (int i = 0; i<array.length; i++){
            for (int j = 0; j < array.length- 1; j++) {
                int temp;
                if (array[j]> array[j+1]){
                    temp = array[j];
                    array[j] = array[j+1];
                    array[j+1] = temp;
                }
            }
-------------------------------------------------------

Поиск минимального значения в массиве

int min = Integer.MAX_VALUE;
        for (int i = 0; i < array.length; i++) {
            if (array [i] < min){
                min = array[i];
            }
        }
        System.out.println(min);
    }
-------------------------------------------------------

Факториал числа

public static long getFact (int number) {
        int result=1;
        for (int i = 1; i <= number; i++) {
            result = result*i;
        }
        return result;
    }
-------------------------------------------------------

Сумма цифр числа

 public static int numbSum(int number) {
        int sum = 0;
        for (int i = number; i > 0; i = i / 10) {
            sum = sum + i % 10;
        }
        return sum;
    }
-------------------------------------------------------

Нахождение максимального числа из отдельных цифр

Arrays.sort(array);
        String result = "";
        for (int i = array.length-1; i >= 0; i--) {
        result = result + array[i];
        }
        return result;
-------------------------------------------------------

Бинарный (двоичный) поиск по массиву

public static int binarySearch(int[] array, int valueToFind) {

        int startIndex = 0;
        int endIndex = array.length - 1;
        int middleIndex;
        while (startIndex <= endIndex) {
            middleIndex = startIndex + (endIndex-startIndex) / 2;
            if (array[middleIndex] == valueToFind) {
                return middleIndex;
            } else if (array[middleIndex] > valueToFind) {
                endIndex = middleIndex - 1;

            } else if (array[middleIndex] < valueToFind) {
                startIndex = middleIndex + 1;
            }
        }
        return -1;
--------------------------------------------------------